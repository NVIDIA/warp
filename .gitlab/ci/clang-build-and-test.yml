# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
  - /.gitlab/ci/common.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

stages:
  - build
  - test

# ==============================================================================
# Build Jobs
# ==============================================================================

.build_linux_base:
  stage: build
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - apt update && apt install curl --no-install-recommends -y wget build-essential ca-certificates
    - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/llvm.gpg
    - echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble main" > /etc/apt/sources.list.d/llvm.list
    - echo "deb-src http://apt.llvm.org/noble/ llvm-toolchain-noble main" >> /etc/apt/sources.list.d/llvm.list
    - apt-get update && apt-get install --no-install-recommends -y clang-22
    - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-22 100
    - update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-22 100
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
    - clang --version
    - curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=$CI_PROJECT_DIR/uv sh
    - source $CI_PROJECT_DIR/uv/env
    - uv venv
    - source .venv/bin/activate
    - uv pip install numpy
    - unset CUDA_HOME

linux-x86_64 build:
  image: gitlab-master.nvidia.com:5005/omniverse/warp/cuda:12.8.1-devel-ubuntu24.04
  extends:
    - .build_linux_base
    - .runner-build-linux-x86_64
  artifacts:
    name: $CI_JOB_NAME_SLUG
    paths:
      - warp/bin/**/*.so
    expire_in: 1 day  # Binary is quite large and we just need it for the test job
  script:
    - python build_lib.py --clang_build_toolchain
    - mkdir -p warp/bin/linux-x86_64
    - mv warp/bin/warp.so warp/bin/linux-x86_64
    - mv warp/bin/warp-clang.so warp/bin/linux-x86_64

# ==============================================================================
# Unit Testing Jobs
#
# Unlike the main testing jobs defined in /.gitlab-ci.yml, these jobs don't
# generate code coverage reports.
# ==============================================================================

linux-x86_64 test:
  stage: test
  image: ubuntu:24.04
  needs: [linux-x86_64 build]
  extends:
    - .omni_nvks_gpu_570_test
    - .save_test_report_artifact
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - apt-get update && apt-get install --no-install-recommends -y curl ca-certificates 
    - df -h
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/warp.so warp/bin/
    - mv warp/bin/linux-x86_64/warp-clang.so warp/bin/
    # Install UV
    - curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=$CI_PROJECT_DIR/uv sh
    - source $CI_PROJECT_DIR/uv/env
    - uv venv
    - source .venv/bin/activate
    - uv pip install numpy usd-core Pillow
    - uv pip install --upgrade torch --extra-index-url https://download.pytorch.org/whl/cu121
    - uv pip install -U "jax[cuda12]"
    - uv pip install -e .
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
    # HACK: disable P2P tests due to misbehaving agents
    - export WARP_DISABLE_P2P_TESTS=1
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect --failfast
