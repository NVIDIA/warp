# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ==============================================================================
# Default pipeline configuration
# ==============================================================================
default:
  interruptible: true
  # Only retry on GitLab failures (not on script failures for example)
  retry:
    max: 2
    when:
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
      - scheduler_failure
      - unknown_failure

# ==============================================================================
# Include the Omniverse DevPlat runner job definitions
# ==============================================================================
include:
  - project: "omniverse/devplat/gitlab/templates/runners"
    file: "/modules/include.yml"
    ref: v2_latest

# ==============================================================================
# Use !reference [.snippets, NAME] to reuse the following snippets
# in the before_script, script, after_script job sections
# ==============================================================================
.snippets:
  define-powershell-GetTime:
    - |
      function GetTime {
        $time = Get-Date -UFormat "%s"
        return $time.Substring(0, $time.IndexOf('.'))
      }
  install-python+warp-aarch64:
    - df -h
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-aarch64/warp.so warp/bin/
    - mv warp/bin/linux-aarch64/warp-clang.so warp/bin/
    - apt-get update && apt-get install curl --no-install-recommends -y
    - tools/packman/packman install -l _build/target-deps/python python ${DEFAULT_PYTHON}-linux-aarch64
    - $PYTHON -m venv _venv
    - source _venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade blosc Pillow
    - python -m pip install -e .
  install-python+warp-macos:
    - df -h
    - export PYTHON_NAME="${DEFAULT_PYTHON}-macos-universal";
    - tools/packman/packman install -l _build/target-deps/python python ${PYTHON_NAME}
    - $PYTHON -m venv _venv
    - source _venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade blosc Pillow
    - python -m pip install -e .
  prepare-kit-artifacts:
    - python3 tools/ci/publishing/build_nodes_info.py
    - mv warp exts/omni.warp.core/
    - find . -type f -exec chmod 664 {} +
    - find . -type d -exec chmod 775 {} +
    - find exts/ -name .gitignore -delete
  test-kit-ext-linux-x86_64:
    - export OMNI_KIT_ALLOW_ROOT=1
    - export KIT_DIR="./_build/kit-deps/kit-kernel"
    - mkdir ./_testoutput
    - |
      "${KIT_DIR}/kit" \
        --enable omni.kit.test \
        --enable omni.kit.loop-default \
        --/app/enableStdoutOutput=0 \
        --/exts/omni.kit.test/testExts/0="${TEST_KIT_EXT}" \
        --ext-folder "${KIT_DIR}/exts" \
        --ext-folder "${KIT_DIR}/extscache" \
        --ext-folder "${KIT_DIR}/apps" \
        --/exts/omni.kit.test/testExtOutputPath="./_testoutput" \
        --portable-root "${KIT_DIR}/" \
        --/telemetry/mode=test \
        --/crashreporter/data/testName="ext-test-${TEST_KIT_EXT}" \
        --ext-folder exts
  test-kit-ext-windows-x86_64:
    - $env:OMNI_KIT_ALLOW_ROOT = 1
    - $env:KIT_DIR = ".\_build\kit-deps\kit-kernel"
    - mkdir .\_testoutput
    - |
      & "${env:KIT_DIR}\kit.exe" `
        --enable omni.kit.test `
        --enable omni.kit.loop-default `
        --/app/enableStdoutOutput=0 `
        --/exts/omni.kit.test/testExts/0="${env:TEST_KIT_EXT}" `
        --ext-folder "${env:KIT_DIR}/exts" `
        --ext-folder "${env:KIT_DIR}/extscache" `
        --ext-folder "${env:KIT_DIR}/apps" `
        --/exts/omni.kit.test/testExtOutputPath="./_testoutput" `
        --portable-root "${env:KIT_DIR}/" `
        --/telemetry/mode=test `
        --/crashreporter/data/testName="ext-test-${env:TEST_KIT_EXT}" `
        --ext-folder exts

# Used to log the output of jobs that run only run unit tests (no coverage report)
.save_test_report_artifact:
  artifacts:
    reports:
      junit: rspec.xml

# Used to save the compiled Warp binaries
.save_warp_bin_artifact:
  artifacts:
    name: $CI_JOB_NAME_SLUG
    paths:
      - warp/native/exports.h
      - warp/bin/**/*.dll
      - warp/bin/**/*.so
      - warp/bin/**/*.dylib
    expire_in: 1 week

# All MacOS jobs use this definition
.macos_warp_tags:
  tags:
    - pkg/xcode/13 # Avoid AWS-MAC-0

# Common settings used by all child pipelines
.trigger_common:
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    PARENT_PROJECT_DIR: $CI_PROJECT_DIR
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_COMMIT_TAG: $CI_COMMIT_TAG
    PARENT_COMMIT_REF_SLUG: $CI_COMMIT_REF_SLUG
    PARENT_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    PM_PACKAGES_ROOT: "$PARENT_PROJECT_DIR/packman-repo"
    PIP_CACHE_DIR: "$PARENT_PROJECT_DIR/.cache/pip"
    CUDA_BIN: "$PARENT_PROJECT_DIR/_build/target-deps/cuda/bin"
    CUDA: "$PARENT_PROJECT_DIR/_build/target-deps/cuda"
    CUDA_HOME: "$CI_PROJECT_DIR/_build/target-deps/cuda"
    PYTHON: "$PARENT_PROJECT_DIR/_build/target-deps/python/python"
    LINBUILD: "$PARENT_PROJECT_DIR/_build/host-deps/linbuild/linbuild.sh"
    WARP_CACHE_ROOT: "$PARENT_PROJECT_DIR/.cache/warp" # Used by the parallel test runner
  trigger:
    strategy: depend
