# Copyright (c) 2024 NVIDIA CORPORATION.  All rights reserved.
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# ==============================================================================
# Warp+CUDA 11 Build and Testing Child Pipeline
#
# This child pipeline is used to build and test Warp when the library is built
# with the CUDA 11 Toolkit (release mode).
#
# This pipeline can be triggered from the main GitLab pipeline under specific
# circumstances. See the child pipelines defined in /.gitlab-ci.yml for the
# trigger conditions. It is not automatically run in merge request pipelines.
# ==============================================================================

include:
  - /.gitlab/ci/common.yml
  - project: "omniverse/sectools/vault"
    file:
      - "templates/v3/common/token_job.gitlab-ci.yml"
      - "templates/v3/linux/codesign.gitlab-ci.yml"
      - "templates/v3/windows/codesign.gitlab-ci.yml"
      - "templates/v3/linux/packman_s3.gitlab-ci.yml"
      - "templates/v3/windows/packman_s3.gitlab-ci.yml"
      - "templates/v3/linux/nucleus/kit-extensions.ov.nvidia.com/kit-extension-svc.gitlab-ci.yml"

    ref: v1_latest

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"

stages:
  - build
  - test
  - package
  - deploy

# ==============================================================================
# Build Jobs (Debug)
# ==============================================================================

linux-aarch64 build:
  stage: build
  image: ubuntu:22.04
  extends:
    - .save_warp_bin_artifact
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - apt-get update && apt-get install build-essential curl --no-install-recommends -y
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - ./tools/ci/building/build-linux-x86_64/build.sh --cuda 11 --no-docker # We are already using the builder image
    - mkdir -p warp/bin/linux-aarch64
    - mv warp/bin/warp.so warp/bin/linux-aarch64
    - mv warp/bin/warp-clang.so warp/bin/linux-aarch64
  tags:
    - arch/arm

linux-x86_64 build:
  stage: build
  image: urm.nvidia.com/ct-omniverse-docker/centos7-gcc10-builder:3.2.0
  extends:
    - .save_warp_bin_artifact
    - .runner-large-build-linux-x86_64
  script:
    - ./tools/ci/building/build-linux-x86_64/build.sh --cuda 11 --no-docker # We are already using the builder image
    - mkdir -p warp/bin/linux-x86_64
    - mv warp/bin/warp.so warp/bin/linux-x86_64
    - mv warp/bin/warp-clang.so warp/bin/linux-x86_64

windows-x86_64 build:
  stage: build
  extends:
    - .save_warp_bin_artifact
    - .runner-build-windows-x86_64
  before_script:
    - powershell -command "Get-Volume | Format-Table -AutoSize"
  script:
    - ./tools/ci/building/build-windows-x86_64/build.bat --cuda 11

# ==============================================================================
# Unit Testing Jobs
#
# Unlike the main testing jobs defined in /.gitlab-ci.yml, the CUDA 11 jobs don't
# generate code coverage reports.
# ==============================================================================

linux-aarch64 test:
  stage: test
  image: ubuntu:22.04
  needs: [linux-aarch64 build]
  extends:
    - .save_test_report_artifact
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - !reference [.snippets, install-python+warp-aarch64]
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect --failfast
  tags:
    - arch/arm

linux-x86_64 test:
  stage: test
  needs: [linux-x86_64 build]
  extends:
    - .omni_nvks_gpu_2x
    - .save_test_report_artifact
  before_script:
    - echo -e "\\e[0Ksection_start:`date +%s`:install_dependencies[collapsed=true]\\r\\e[0KInstalling dependencies"
    - df -h
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/warp.so warp/bin/
    - mv warp/bin/linux-x86_64/warp-clang.so warp/bin/
    - tools/packman/packman install -l _build/target-deps/python python ${DEFAULT_PYTHON}-linux-x86_64
    - export PATH="$CUDA_BIN:$PATH"
    - $PYTHON -m venv _venv
    - source _venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade usd-core
    - python -m pip install --upgrade torch --extra-index-url https://download.pytorch.org/whl/cu121
    - python -m pip install --upgrade "jax[cuda12_pip]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
    - python -m pip install -e .
    - echo -e "\\e[0Ksection_end:`date +%s`:install_dependencies\\r\\e[0K"
    # HACK: disable P2P tests due to misbehaving agents
    - export WARP_DISABLE_P2P_TESTS=1
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect --failfast

windows-x86_64 test:
  stage: test
  needs: [windows-x86_64 build]
  extends:
    - .runner-test-windows-x86_64-gpu
    - .save_test_report_artifact
  before_script:
    - !reference [.snippets, define-powershell-GetTime]
    - Write-Output "$([char]27)[0Ksection_start:$(GetTime):install_dependencies[collapsed=true]$([char]13)$([char]27)[0KInstalling dependencies"
    - powershell -command "Get-Volume | Format-Table -AutoSize"
    - $python_name = $DEFAULT_PYTHON + "-windows-x86_64"
    - tools/packman/packman.cmd install -l _build/target-deps/python python $python_name
    - '& $env:CI_PROJECT_DIR\_build\target-deps\python\python.exe -m venv _venv'
    - .\_venv\Scripts\Activate.ps1
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade usd-core
    # Temporary HACK: use NumPy < 2.0 on Windows due to issues with Torch wheels that are not compatible
    # https://github.com/pytorch/pytorch/issues/128860
    - python -m pip install "numpy<2"
    - python -m pip install --upgrade torch --extra-index-url https://download.pytorch.org/whl/cu121
    - python -m pip install -e .
    - Write-Output "$([char]27)[0Ksection_end:$(GetTime):install_dependencies$([char]13)$([char]27)[0K"
  script:
    - python -m warp.tests --junit-report-xml rspec.xml -s autodetect --failfast

# ==============================================================================
# Packaging Jobs
#
# ==============================================================================

# Creates wheel files for PyPI
# Note that compared to the job in .gitlab-ci.yml, there is no aarch64 job
# due to problems building a debug binary
create pypi wheels:
  stage: package
  needs:
    - linux-aarch64 build
    - linux-x86_64 build
    - windows-x86_64 build
  extends:
    - .runner-utility-linux-x86_64
  before_script:
    # Move binaries into platform-specific folders. Already done in the build jobs for Linux.
    - mkdir -p warp/bin/windows-x86_64
    - mv warp/bin/warp.dll warp/bin/windows-x86_64/
    - mv warp/bin/warp-clang.dll warp/bin/windows-x86_64/
    - python3 -m pip install --upgrade pip
    - python3 -m pip install build
  script:
    - sed -i "s/^\(.*\)$/\1+cu11/" VERSION.md  # Modify VERSION.md with +cu11
    - python3 -m build --wheel -C--build-option=-Pwindows-x86_64
    - python3 -m build --wheel -C--build-option=-Plinux-x86_64
    - python3 -m build --wheel -C--build-option=-Plinux-aarch64
    - find . -type f -exec chmod 664 {} +
    - find . -type d -exec chmod 775 {} +
  artifacts:
    name: $PARENT_COMMIT_REF_SLUG-$PARENT_COMMIT_SHORT_SHA
    expose_as: "Python Wheels"
    paths:
      - "dist/"
    when: always

# Creates an artifact suitable for publishing the Kit extensions
create linux-x86_64 kit artifacts:
  stage: package
  needs:
    - linux-x86_64 build
  extends:
    - .runner-utility-linux-x86_64
  before_script:
    - apt-get update && apt-get install zip --no-install-recommends -y
    # Move compiled binaries out of platform-specific directory
    - mv warp/bin/linux-x86_64/*.so warp/bin/
    - rm -r warp/bin/linux-x86_64/
  script:
    - !reference [.snippets, prepare-kit-artifacts]
    - zip -r kit-extensions-linux-x86_64.zip exts/
  artifacts:
    name: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    expose_as: "Kit Extensions linux-x86_64"
    paths:
      - kit-extensions-linux-x86_64.zip

create windows-x86_64 kit artifacts:
  stage: package
  needs:
    - windows-x86_64 build
  extends:
    - .runner-utility-linux-x86_64
  before_script:
    - apt-get update && apt-get install zip --no-install-recommends -y
  script:
    - !reference [.snippets, prepare-kit-artifacts]
    - zip -r kit-extensions-windows-x86_64.zip exts/
  artifacts:
    name: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    expose_as: "Kit Extensions windows-x86_64"
    paths:
      - kit-extensions-windows-x86_64.zip

# ==============================================================================
# Deployment Jobs
#
# This section currently contains jobs that publish files to the internal
# GitLab service.
# ==============================================================================

publish wheels to gitlab pypi registry:
  stage: deploy
  image: python:3.11-slim
  needs: ["create pypi wheels"]
  extends:
    - .runner-utility-linux-x86_64
  rules:
    - if: $PARENT_COMMIT_BRANCH =~ /release-.*/
      when: manual
      allow_failure: true
  before_script:
    - python3 -m pip install --upgrade pip
    - python3 -m pip install --upgrade build twine
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --verbose --skip-existing --non-interactive --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

# Uploads the wheels to the internal GitLab package registry in the Warp project
# Generated files will be in a branch/tag-specific folder
publish wheels to gitlab package registry:
  stage: deploy
  needs: ["create pypi wheels", "create linux-x86_64 kit artifacts", "create windows-x86_64 kit artifacts"]
  extends:
    - .runner-utility-linux-x86_64
  rules:
    - if: $PARENT_COMMIT_TAG
    - if: $PARENT_COMMIT_BRANCH =~ /release-.*/
    - when: manual # Can be triggered in all other scenarios
      allow_failure: true
  before_script:
    - apt-get update && apt-get install curl --no-install-recommends -y
  script:
    - |
      for file in $(find . -name '*.whl'); do
          filename=$(basename -- "$file")
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "$file" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/warp/${CI_COMMIT_REF_SLUG}/${filename}"
      done
    - |
      if [ -f kit-extensions-linux-x86_64.zip ]; then
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file kit-extensions-linux-x86_64.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/warp/${CI_COMMIT_REF_SLUG}/kit-extensions-linux-x86_64.zip"
      else
        echo "kit-extensions-linux-x86_64.zip not found, skipping upload."
      fi
    - |
      if [ -f kit-extensions-windows-x86_64.zip ]; then
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file kit-extensions-windows-x86_64.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/warp/${CI_COMMIT_REF_SLUG}/kit-extensions-windows-x86_64.zip"
      else
        echo "kit-extensions-windows-x86_64.zip not found, skipping upload."
      fi
    - echo "See the published files at $CI_PROJECT_URL/-/packages"


# Uploads the extensions to packman.
publish extensions to packman:
  stage: deploy
  needs: ["create linux-x86_64 kit artifacts", "create windows-x86_64 kit artifacts"]
  extends:
    - .runner-utility-linux-x86_64
    - .osec:vault:v3:prod_token_job
  rules:
    - if: $CI_PROJECT_PATH != "omniverse/warp" # Prevent fork pipelines from running this job
      when: never
    - if: $PARENT_COMMIT_BRANCH =~ /release-.*/
      when: manual
      allow_failure: true
  environment:
    name: Kit Extension Registry
    url: http://omniexts.nvidia.com/omni.warp
    deployment_tier: production
  before_script:
    - mkdir -p _build/linux-x86_64/release
    - unzip kit-extensions-linux-x86_64.zip -d _build/linux-x86_64/release
    - mkdir -p _build/windows-x86_64/release
    - unzip kit-extensions-windows-x86_64.zip -d _build/windows-x86_64/release
    - tools/packman/packman pull -p linux-x86_64 deps/kit-deps.packman.xml
  script:
    - !reference [.osec:vault:v3:linux, codesign:perform_vault_requests]
    - !reference [.osec:vault:v3:linux, packman_s3:perform_vault_requests]
    - !reference [.osec:vault:v3:linux, nucleus:kit-extensions.ov.nvidia.com:kit-extension-svc:perform_vault_requests]
    - tools/repo.sh publish_exts --publish-all
